# ðŸš€ K8s (Kubernetes) 


* **Origin:** Built to manage large systems where changes need to be applied to **all nodes at once** from a single control point.
* **Code Language:** Written mainly in **Go (GO)**.
* **Analogy:** Think of an **orchestra** ðŸŽ». The **Master Node** is the **conductor**, keeping everyone (Worker Nodes) in sync.

***

## II. K8s Architecture (The Cluster)

The cluster is split into the brain (Master) and the muscle (Workers).

### A. Master Node (Control Plane - The Brain)
* **Role:** The **Central Control Plane**. It issues all the commands.
* **Workloads?** **NO.** Apps **don't run here**.
* **Req't:** Need at least **1 Master Node**.
* **Local Setup (e.g., Minikube):** Can run both the Master and Worker functions in a **Single-Image Setup**.

### B. Worker Node
* **Role:** Where the actual **apps/workloads** run.

***

## III. Control Plane Components (How the Brain Works)

| Component | What it Does |
| :--- | :--- |
| **`kube-api-server`** | The main **API endpoint**. All user commands (`kubectl`) go through here first. |
| **`etcd`** | The **distributed database**. Stores the cluster's **optimal config state** (what should be running) moment-to-moment. |
| **Controller Manager** | The **"Watcher"**. **Watches the cluster state** (comparing it to `etcd`). Handles maintenance (e.g., maintaining correct replica count). |
| **Scheduler** | Decides **where** a new Pod should run. Moves pods from a "spaced state" (Pending) to an available node based on resources. |
| **`kubelet`** | The **Node Agent** running on **each Worker Node**. It takes instructions from the Master and manages the actual Pods/Containers. |

***

## IV. Core Functionality & Commands

### A. Deployment & Self-Healing

* **Self-Healing:** Key feature! If we set `--replicas=3` and one Pod dies (or is manually deleted), a new replica is **automatically created immediately** to maintain the target of 3.
* **Create Deployment:** `kubectl create deployment [name] --image=[image] --replicas=[#]`
* **Apply Configuration:** `kubectl apply -f [deployment.yaml]` (Runs a YAML config file).
* **Delete Pod:** `kubectl delete pod [pod name]` (The Controller Manager sees the change and self-heals it!).

### B. Status Commands (`kubectl`)
* **Main Tool:** `kubectl` is the CLI used to **control the worker nodes** (view status, apply changes).
* **See Everything:** `kubectl get all`
* **See Pods:** `kubectl get pods`

### C. Networking & Load Balancing (LB)

* **Context:** Used when manual changes on many servers (services/nodes) are impossible. Traffic $\rightarrow$ **LB** $\rightarrow$ **Other LBs** $\rightarrow$ **Apps** on Kernels (K-Server 1, etc.).
* **Loopback/Local:** $\mathbf{127.0.0.1}$ is the **Loopback Address** ("localhost"). E.g., `127.0.0.1:8080`.

| Service Type | Key Feature | What it Maps |
| :--- | :--- | :--- |
| **Node Port** | Host port **remains unchanged**. | Maps **Host Port:available\_port** to the Pod IP. |
| **Cluster IP** | The service route is **exposed to the outside world**. | All associated Pods get a **single public IP**. |